// web3.js

const CONTRACT_ADDRESS = "0xeb6d57badffae2482d1fe1f91658d5dc993070e8";

const ABI = [
  {
    "anonymous": false,
    "inputs": [
      { "indexed": true, "internalType": "address", "name": "player", "type": "address" },
      { "indexed": false, "internalType": "string", "name": "direction", "type": "string" },
      { "indexed": false, "internalType": "uint256", "name": "timestamp", "type": "uint256" }
    ],
    "name": "MoveMade",
    "type": "event"
  },
  { "inputs": [], "name": "moveDown", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
  { "inputs": [], "name": "moveLeft", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
  { "inputs": [], "name": "moveRight", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
  { "inputs": [], "name": "moveUp", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
];

const MONAD = {
  chainId: '0x279F', // 10239 in hex
  chainName: 'Monad Testnet',
  rpcUrls: ['https://testnet-rpc.monad.xyz'],
  nativeCurrency: {
    name: 'Monad',
    symbol: 'MON',
    decimals: 18
  },
  blockExplorerUrls: ['https://testnet.monadexplorer.com/']
};

let provider, signer, contract, currentAccount;

// Connect Wallet Function
async function connectWallet() {
  const eth = window.ethereum;
  if (!eth) {
    alert("No wallet found. Please install MetaMask.");
    return;
  }

  try {
    // Try to switch to Monad Testnet
    await eth.request({
      method: "wallet_switchEthereumChain",
      params: [{ chainId: MONAD.chainId }]
    });
  } catch (switchError) {
    // If Monad is not added, add it
    if (switchError.code === 4902) {
      try {
        await eth.request({
          method: "wallet_addEthereumChain",
          params: [MONAD]
        });
      } catch (addError) {
        console.error("Failed to add Monad Testnet:", addError);
        alert("Could not add Monad Testnet. Please add it manually.");
        return;
      }
    } else {
      console.error("Switch network error:", switchError);
      alert("Please switch to Monad Testnet.");
      return;
    }
  }

  try {
    const accounts = await eth.request({ method: "eth_requestAccounts" });
    if (!accounts || accounts.length === 0) {
      alert("No account found. Please connect your wallet.");
      return;
    }

    currentAccount = accounts[0];
    provider = new ethers.BrowserProvider(eth);
    signer = await provider.getSigner();
    contract = new ethers.Contract(CONTRACT_ADDRESS, ABI, signer);

    console.log("✅ Wallet connected:", currentAccount);
    document.getElementById("status").textContent = `🔗 Wallet: ${currentAccount.slice(0, 6)}…${currentAccount.slice(-4)}`;
  } catch (error) {
    if (error.code === 4001) {
      alert("Connection request rejected.");
    } else {
      console.error("Wallet connection error:", error);
      alert("Failed to connect wallet.");
    }
  }
}

// Send Move Transaction
async function sendMove(direction) {
  if (!contract || !currentAccount) {
    alert("Connect your wallet first.");
    return;
  }

  const moveFunctions = {
    up: contract.moveUp,
    down: contract.moveDown,
    left: contract.moveLeft,
    right: contract.moveRight
  };

  const moveFn = moveFunctions[direction];
  if (!moveFn) {
    alert("Invalid direction.");
    return;
  }

  try {
    const tx = await moveFn();
    document.getElementById("status").textContent = "⏳ Waiting for confirmation...";
    await tx.wait();
    document.getElementById("status").textContent = `✅ Move ${direction} confirmed!`;
    console.log("✔️ Transaction confirmed:", tx.hash);
  } catch (err) {
    console.error("❌ Transaction failed:", err);
    alert("Transaction failed or was rejected.");
  }
}

// Setup connect button after page loads
window.addEventListener("DOMContentLoaded", () => {
  const btn = document.getElementById("connect-wallet");
  if (btn) {
    btn.addEventListener("click", connectWallet);
  }

  // Optional: reload on account or network change
  if (window.ethereum) {
    window.ethereum.on("accountsChanged", () => location.reload());
    window.ethereum.on("chainChanged", () => location.reload());
  }
});
