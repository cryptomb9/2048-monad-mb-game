/* ------------------------------------------------------------------
   web3.js – multi-wallet (EIP-6963) + Monad Testnet
-------------------------------------------------------------------*/

const CONTRACT_ADDRESS = "0xeb6d57badffae2482d1fe1f91658d5dc993070e8";
const ABI = [ /* … same ABI as before … */ ];

const MONAD = {
  chainId: "0x279F",
  chainName: "Monad Testnet",
  rpcUrls: ["https://testnet-rpc.monad.xyz"],
  nativeCurrency:{name:"Monad",symbol:"MON",decimals:18},
  blockExplorerUrls:["https://testnet.monadexplorer.com/"]
};

/* state */
let eth=null, web3=null, contract=null, currentAcc=null;
window.currentAcc = null; // expose for other scripts

/* helpers */
const $      = id=>document.getElementById(id);
const short  = a=>a?`${a.slice(0,6)}…${a.slice(-4)}`:"";
const status = msg=>{const el=$("status");if(el)el.textContent=msg;};

/* choose provider */
function pickProvider(){
  const injected=window.ethereum;
  if(!injected) return null;
  if(Array.isArray(injected.providers)&&injected.providers.length){
    const mm=injected.providers.find(p=>p.isMetaMask);
    return mm||injected.providers[0];
  }
  return injected;
}

/* wallet connect */
async function connectWallet(){
  eth=pickProvider();
  if(!eth){alert("No EVM wallet found.");return;}

  /* switch / add Monad */
  try{
    await eth.request({method:"wallet_switchEthereumChain",params:[{chainId:MONAD.chainId}]});
  }catch(err){
    if(err.code===4902){
      await eth.request({method:"wallet_addEthereumChain",params:[MONAD]});
    }else{alert("Switch to Monad Testnet then try again.");return;}
  }

  /* request accounts */
  try{
    const accs=await eth.request({method:"eth_requestAccounts"});
    if(!accs.length) throw new Error("No accounts");
    currentAcc=accs[0]; window.currentAcc=currentAcc;
    web3=new Web3(eth);
    contract=new web3.eth.Contract(ABI,CONTRACT_ADDRESS);
    status(`🔗 Wallet: ${short(currentAcc)}`);
  }catch(e){
    alert(e.message||"Wallet connection failed");
  }
}

/* send move tx */
async function sendMove(dir){
  if(!contract||!currentAcc){alert("Connect wallet first");return;}
  const fnName={up:"moveUp",down:"moveDown",left:"moveLeft",right:"moveRight"}[dir];
  if(!fnName){alert("Bad direction");return;}
  try{
    status(`⏳ Confirm ${dir}…`);
    const gas = await contract.methods[fnName]().estimateGas({from:currentAcc});
    await contract.methods[fnName]().send({from:currentAcc,gas});
    status(`✅ ${dir} confirmed`);
  }catch(e){
    console.error(e); status("❌ Tx failed"); alert("Transaction failed");
  }
}

/* attach */
window.addEventListener("DOMContentLoaded",()=>{
  $("connect-wallet").onclick=connectWallet;
});

/* expose */
window.sendMove=sendMove;
