/* ------------------------------------------------------------------
   web3.js  ‚Äì  Monad Testnet wallet connect + move functions
   ‚Ä¢ Works with MetaMask desktop AND in-app mobile browser
   ‚Ä¢ No auto-reloads that break mobile flow
-------------------------------------------------------------------*/

const CONTRACT_ADDRESS = "0xeb6d57badffae2482d1fe1f91658d5dc993070e8";

const ABI = [
  {
    anonymous: false,
    inputs: [
      { indexed: true,  internalType: "address", name: "player",    type: "address" },
      { indexed: false, internalType: "string",  name: "direction", type: "string"  },
      { indexed: false, internalType: "uint256", name: "timestamp", type: "uint256" }
    ],
    name: "MoveMade",
    type: "event"
  },
  { inputs: [], name: "moveDown",  outputs: [], stateMutability: "nonpayable", type: "function" },
  { inputs: [], name: "moveLeft",  outputs: [], stateMutability: "nonpayable", type: "function" },
  { inputs: [], name: "moveRight", outputs: [], stateMutability: "nonpayable", type: "function" },
  { inputs: [], name: "moveUp",    outputs: [], stateMutability: "nonpayable", type: "function" }
];

const MONAD = {
  chainId: "0x279F",
  chainName: "Monad Testnet",
  rpcUrls:           ["https://testnet-rpc.monad.xyz"],
  blockExplorerUrls: ["https://testnet.monadexplorer.com/"],
  nativeCurrency:    { name: "Monad", symbol: "MON", decimals: 18 }
};

/* -------------------- state -------------------- */
let provider, signer, contract, currentAccount;

/* -------------------- helpers ------------------ */
const $ = (id) => document.getElementById(id);
const shorten = (addr) => addr.slice(0, 6) + "‚Ä¶" + addr.slice(-4);
const setStatus = (msg) => { if ($("status")) $("status").textContent = msg; };

/* -------------------- connect wallet ----------- */
async function connectWallet() {
  const eth = window.ethereum;
  if (!eth) {
    alert("Please install MetaMask or another EVM wallet.");
    return;
  }

  /* 1Ô∏è‚É£  Ensure Monad Testnet */
  try {
    await eth.request({ method: "wallet_switchEthereumChain", params: [{ chainId: MONAD.chainId }] });
  } catch (err) {
    // add if not present
    if (err.code === 4902) {
      try {
        await eth.request({ method: "wallet_addEthereumChain", params: [MONAD] });
      } catch (addErr) {
        console.error("Add chain failed:", addErr);
        alert("Could not add Monad Testnet.");
        return;
      }
    } else {
      alert("Switch to Monad Testnet in your wallet and retry.");
      return;
    }
  }

  /* 2Ô∏è‚É£  Request account */
  try {
    const accounts = await eth.request({ method: "eth_requestAccounts" });
    if (!accounts.length) throw new Error("No accounts returned");
    currentAccount = accounts[0];

    provider = new ethers.BrowserProvider(eth);
    signer   = await provider.getSigner();
    contract = new ethers.Contract(CONTRACT_ADDRESS, ABI, signer);

    setStatus(`üîó Wallet: ${shorten(currentAccount)}`);
    console.log("‚úÖ Connected:", currentAccount);
  } catch (err) {
    if (err.code === 4001) {
      alert("Connection request rejected.");
    } else {
      console.error("Connect error:", err);
      alert("Wallet connection failed.");
    }
  }
}

/* -------------------- send move ---------------- */
async function sendMove(direction) {
  if (!contract || !currentAccount) {
    alert("Please connect your wallet first.");
    return;
  }

  const fn = {
    up:    contract.moveUp,
    down:  contract.moveDown,
    left:  contract.moveLeft,
    right: contract.moveRight
  }[direction];

  if (!fn) {
    alert("Invalid move.");
    return;
  }

  try {
    setStatus(`‚è≥ Confirm move ${direction} in wallet‚Ä¶`);
    const tx = await fn();
    await tx.wait();                       // wait 1 confirmation
    setStatus(`‚úÖ Move ${direction} confirmed`);
    console.log("Tx confirmed:", tx.hash);
  } catch (err) {
    console.error("Tx error:", err);
    setStatus("‚ùå Transaction failed");
    alert(err.reason || err.message || "Transaction failed.");
  }
}

/* -------------------- event listeners ---------- */
window.addEventListener("DOMContentLoaded", () => {
  const btn = $("connect-wallet");
  if (btn) btn.addEventListener("click", connectWallet);
});

/* ‚ö†Ô∏è  MOBILE-SAFE account & network changes
   ‚Äì just update status; do NOT auto-reload */
if (window.ethereum) {
  ethereum.on("accountsChanged", (accounts) => {
    if (accounts.length) {
      currentAccount = accounts[0];
      setStatus(`üîó Wallet: ${shorten(currentAccount)}`);
    } else {
      currentAccount = null;
      setStatus("üîå Not connected");
    }
  });

  ethereum.on("chainChanged", (chainId) => {
    if (chainId !== MONAD.chainId) {
      setStatus("‚ö†Ô∏è Wrong network ‚Äì switch to Monad");
    } else {
      setStatus(`üîó Wallet: ${shorten(currentAccount || "")}`);
    }
  });
}

/* ------------------------------------------------
   Export sendMove so game.js can call it
------------------------------------------------ */
window.sendMove = sendMove;
