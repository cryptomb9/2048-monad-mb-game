/* ------------------------------------------------------------------
   web3.js ‚Äì multi-wallet support + Monad Testnet + move functions
-------------------------------------------------------------------*/

const CONTRACT_ADDRESS = "0xeb6d57badffae2482d1fe1f91658d5dc993070e8";
const ABI = [
  {
    anonymous: false,
    inputs: [
      { indexed: true,  internalType: "address", name: "player",    type: "address" },
      { indexed: false, internalType: "string",  name: "direction", type: "string"  },
      { indexed: false, internalType: "uint256", name: "timestamp", type: "uint256" }
    ],
    name: "MoveMade",
    type: "event"
  },
  { inputs: [], name: "moveDown",  outputs: [], stateMutability: "nonpayable", type: "function" },
  { inputs: [], name: "moveLeft",  outputs: [], stateMutability: "nonpayable", type: "function" },
  { inputs: [], name: "moveRight", outputs: [], stateMutability: "nonpayable", type: "function" },
  { inputs: [], name: "moveUp",    outputs: [], stateMutability: "nonpayable", type: "function" }
];

const MONAD = {
  chainId: "0x279F",
  chainName: "Monad Testnet",
  rpcUrls:           ["https://testnet-rpc.monad.xyz"],
  blockExplorerUrls: ["https://testnet.monadexplorer.com/"],
  nativeCurrency:    { name: "Monad", symbol: "MON", decimals: 18 }
};

/* -------------------- state -------------------- */
let eth        = null;   // chosen provider
let provider   = null;
let signer     = null;
let contract   = null;
let currentAcc = null;

/* -------------------- helpers ------------------ */
const $        = (id)  => document.getElementById(id);
const shorten  = (a)   => a ? a.slice(0, 6) + "‚Ä¶" + a.slice(-4) : "";
const setStat  = (msg) => { const el = $("status"); if (el) el.textContent = msg; };

/* ---------- choose the right injected provider --------------- */
function pickInjectedProvider() {
  const injected = window.ethereum;
  if (!injected) return null;

  // EIP-6963 / multiple providers: ethereum.providers is an array
  if (Array.isArray(injected.providers) && injected.providers.length) {
    // prefer MetaMask, else first one
    const meta = injected.providers.find((p) => p.isMetaMask);
    return meta || injected.providers[0];
  }
  return injected; // only one provider
}

/* -------------------- connect wallet ------------------------- */
async function connectWallet() {
  eth = pickInjectedProvider();
  if (!eth) {
    alert("No EVM wallet detected. Please install MetaMask or similar.");
    return;
  }

  /* 1Ô∏è‚É£ Ensure Monad Testnet */
  try {
    await eth.request({ method: "wallet_switchEthereumChain", params: [{ chainId: MONAD.chainId }] });
  } catch (err) {
    if (err.code === 4902) {
      try {
        await eth.request({ method: "wallet_addEthereumChain", params: [MONAD] });
      } catch (addErr) {
        console.error(addErr); alert("Could not add Monad Testnet."); return;
      }
    } else {
      alert("Switch to Monad Testnet in your wallet and retry."); return;
    }
  }

  /* 2Ô∏è‚É£ Request accounts */
  try {
    const accs = await eth.request({ method: "eth_requestAccounts" });
    if (!accs.length) throw new Error("No accounts");
    currentAcc = accs[0];

    provider = new ethers.BrowserProvider(eth);
    signer   = await provider.getSigner();
    contract = new ethers.Contract(CONTRACT_ADDRESS, ABI, signer);

    setStat(`üîó Wallet: ${shorten(currentAcc)}`);
    console.log("‚úÖ Connected with", currentAcc);
  } catch (err) {
    if (err.code === 4001) alert("Connection rejected.");
    else { console.error(err); alert("Wallet connection failed."); }
  }
}

/* -------------------- send move ------------------------------- */
async function sendMove(dir) {
  if (!contract || !currentAcc) { alert("Connect your wallet first."); return; }

  const fn = { up: contract.moveUp, down: contract.moveDown, left: contract.moveLeft, right: contract.moveRight }[dir];
  if (!fn) { alert("Invalid move."); return; }

  try {
    setStat(`‚è≥ Confirm ${dir} in wallet‚Ä¶`);
    const tx = await fn();
    await tx.wait();
    setStat(`‚úÖ Move ${dir} confirmed`);
  } catch (err) {
    console.error(err);
    alert(err.reason || err.message || "Transaction failed");
    setStat("‚ùå Transaction failed");
  }
}

/* -------------------- event listeners ------------------------- */
window.addEventListener("DOMContentLoaded", () => {
  const btn = $("connect-wallet");
  if (btn) btn.addEventListener("click", connectWallet);
});

/* provider-specific account / chain change listeners */
function attachProviderEvents(p) {
  if (!p || !p.on) return;
  p.on("accountsChanged", (accs) => {
    currentAcc = accs[0] || null;
    setStat(currentAcc ? `üîó Wallet: ${shorten(currentAcc)}` : "üîå Not connected");
  });
  p.on("chainChanged", (cId) => {
    if (cId !== MONAD.chainId) setStat("‚ö†Ô∏è Wrong network ‚Äì switch to Monad");
    else setStat(`üîó Wallet: ${shorten(currentAcc || "")}`);
  });
}

attachProviderEvents(pickInjectedProvider());

/* --------------------------------------------------------------
   expose sendMove for game.js
----------------------------------------------------------------*/
window.sendMove = sendMove;
